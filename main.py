import telebot
from telebot import types

from bs4 import BeautifulSoup

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from random import choices

import figurestophoto as fp

import requests
import socket
import threading
import smtplib as root

print('Bot succefull runned.')
bot = telebot.TeleBot('1111001859:AAGYy4uSLgGCFcnkqcKyBOY4OEDRsOjxMI0')
post = "https://nekobin.com/api/documents"
SYMBOLS = "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890"


@bot.message_handler(commands=['commands'])
def start(message):

    msg = "üí∞            ¬ª <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n<code>–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö, –ø—Ä–æ—à—É –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤–æ –≤—Ä–µ–¥.</code>\n\n     ¬ª –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã <b>–≤—Å–µ–º</b> –±–µ–∑ –≥—Ä—É–ø–ø –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
    hcommands = "   üéó¬ª <u>Hacks and Checks Utils</u>\n1. ¬ª <b>/send_mail</b> (–≤–∞—à–∞ –ø–æ—á—Ç–∞) (–ø–∞—Ä–æ–ª—å) (–∫–æ–º—É) - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∞–º-–ø–∏—Å–µ–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É. (–í–∞—à–∞ –ø–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç mail.ru)\n2. ¬ª <b>/gen_pass</b> - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è\n"
    hcommands1 = "3. ¬ª <b>/dos</b> (ip) - –ù–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è DoS –∞—Ç–∞–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞\n4. ¬ª <b>/scan_port</b> (ip) (–¥–æ –∫–∞–∫–æ–≥–æ –ø–æ—Ä—Ç–∞) - –°–∫–∞–Ω-–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ IP.#\n5. ¬ª <b>/parser</b> - –ü–∞—Ä—Å–µ—Ä —Å–∞–π—Ç–æ–≤ HTML –∫–æ–¥–∞.\n"
    hcommands2 = "6. ¬ª <b>/checkip</b> (ip) - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ –ø–æ –µ–≥–æ IP\n7. ¬ª <b>/checkph</b> (phone) - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ —Å –µ–≥–æ –Ω–µ—Ç–æ—á–Ω—ã–º –º–µ—Å—Ç–æ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ–º."
    hcommands3 = "\n8. ¬ª <b>/ping</b> (site) - –ß–µ–∫–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ —Å–∞–π—Ç–∞\n\n"
    autils = "   üéó<u>Other Utils</u> ¬ª\n9. ¬ª <b>/nekobin</b> - –í—ã–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n10. ¬ª <b>/textimage</b> - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É.\n\n"
    games = "   üéó<u>Mini-games</u> ¬ª\n 11. ¬ª <b>.–ü –∏–ª–∏ –î</b> - –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ\n 12. ¬ª <b>.–ö–ù–ë</b> - –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü–∞, –±—É–º–∞–≥–∞"
    about = "\n\n   üéó<u>About</u> ¬ª\n Inst: @thestrikem\n Steam: Strike_777\n Vk: @thestrikem\n GitHub: @thestrikem\n\n@strikemtestbot"

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–ß–µ–∫ IP', '–ß–µ–∫ –ù–æ–º–µ—Ä', '–ù–µ–∫–æ–±–∏–Ω', '–°–∫–∞–Ω–Ω–µ—Ä –ü–æ—Ä—Ç–æ–≤', '–°–ø–∞–º–µ—Ä –ø–æ—á—Ç—ã', '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π')

    bot.send_message(message.chat.id, f"{msg} {hcommands} {hcommands1} {hcommands2} {hcommands3} {autils} {games} {about}", parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['nekobin'])
def start(message):
    text = 'üí∞ ¬ª –ò—Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç nekobin.com'
    bot.register_next_step_handler(bot.send_message(message.chat.id, text, parse_mode='html'), text_a)

def text_a(message):
    msg = message.text
    paste = requests.post(post, data={"content": msg})
    paste.raise_for_status()
    result = f"‚úÖ ¬ª <b>–í–∞—à —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n¬ª –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç: https://nekobin.com/{paste.json()['result']['key']}\n\n@strikemtestbot"
    bot.send_message(message.chat.id, result, parse_mode='html')

@bot.message_handler(commands=['ip'])
def start(message):
    args = message.text.split(" ")
    ip = args[1]
    ips = socket.gethostbyname(f"{ip}")
    bot.send_message(message.chat.id, f"–ê–π–ø–∏: {ips}")

@bot.message_handler(commands=['ping']) #–ù–ï –†–ê–ë–û–¢–ê–ï–¢
def start(message):
    try:
        args = message.text.split(" ")
        get_ping = args[1]

        def info():
            response = requests.get(f'https://check-host.net/check-ping?host={get_ping}&max_nodes=5')

            check_id = response.json()['request_id']

            responselast = requests.get(f'https://check-host.net/check-result/{check_id}')

            result = response.json()

            global resultate
            resultate = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"

            bot.send_message(message.chat.id, resultate)

        def main():
            info()

        main()

    except Exception as e:
        print(e)

@bot.message_handler(commands=['gen_pass'])
def start(message):
    try:
        args = message.text.split(" ")
        lenght = int(args[1])
        id1 = message.chat.id

        if lenght >= 101: bot.send_message(id1, '–ó–∞—á–µ–º —Ç–µ–±–µ —Ç–∞–∫–æ–π –ø–∞—Ä–æ–ª—å, –Ω–µ–µ–µ')

        else:
            password = ''.join(choices(SYMBOLS, k=lenght))
            result = f"‚úÖ ¬ª –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{password}</b>\n¬ª –ö–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: <b>{lenght}</b>\n\n@strikemtestbot"
            bot.send_message(message.chat.id, result, parse_mode='html')

    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞')

@bot.message_handler(commands=['send_mail'])
def start(message):
    try:
        args = message.text.split(" ")
        L = args[1]
        P = args[2]
        U = args[3]
        To = args[4]
        T = args[5].replace('+', ' ')
        M = args[6].replace('+', ' ')
        N = args[7]

        for value in range(int(N)):
            msg = MIMEMultipart()

            msg['Subject'] = T
            msg['From'] = L
            body = M
            msg.attach(MIMEText(body, 'plain'))

            server = root.SMTP_SSL(U, 465)
            server.login(L, P)
            server.sendmail(L, To, msg.as_string())
            server.quit()

            value += 1

        inet = f"‚úÖ ¬ª –ü–æ—á—Ç–µ <b>{To}</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>{N}</b>, –æ—Ç <b>{L}</b>"
        bot.send_message(message.chat.id, inet, parse_mode='html')
    except Exception as e:
        print(e)


@bot.message_handler(commands=['checkip'])
def start(message):
    try:
        args = message.text.split(" ")
        get_ip = args[1]

        def info():
            response = requests.get(f'http://ipinfo.io/{get_ip}/json')

            user_ip = response.json()['ip']
            user_city = response.json()['city']
            user_region = response.json()['region']
            user_country = response.json()['country']
            user_location = response.json()['loc']
            #user_org = response.json()['org']
            user_timezone = response.json()['timezone']

            global all_info
            all_info = f"‚úÖ ¬ª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP <b>{user_ip}</b>:\n\n¬ª –ì–æ—Ä–æ–¥: <b>{user_city}</b>\n¬ª –†–µ–≥–∏–æ–Ω: <b>{user_region}</b>\n¬ª –°—Ç—Ä–∞–Ω–∞: <b>{user_country}</b>\n¬ª –õ–æ–∫–∞—Ü–∏—è: <b>{user_location}</b>\n¬ª –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—è—Å: <b>{user_timezone}</b>\n\n@strikemtestbot"

            bot.send_message(message.chat.id, all_info, parse_mode='html')

        def main():
            info()

        main()
    except Exception as e:
        print(e)

@bot.message_handler(commands=['checkph'])
def start(message):
    try:
        args = message.text.split(" ")
        get_phone = args[1]

        def info():
            response = requests.get(f'https://htmlweb.ru/geo/api.php?json&telcod={get_phone}')

            user_country = response.json()['country']['english']
            user_namec = response.json()['country']['name']
            user_fullnamec = response.json()['country']['fullname']
            user_code = response.json()['country']['country_code3']
            user_iso = response.json()['country']['iso']
            user_telecod = response.json()['country']['telcod']
            user_lang = response.json()['country']['lang']
            user_id = response.json()['country']['id']
            user_location = response.json()['country']['location']
            user_city = response.json()['capital']['name']
            user_area = response.json()['capital']['area']
            user_tt = response.json()['capital']['telcod']
            user_width = response.json()['capital']['latitude']
            user_lenth = response.json()['capital']['longitude']
            user_timez = response.json()['time_zone']
            user_imgf = response.json()['ImgFlag']
            user_post = response.json()['capital']['post']
            user_oper = response.json()['0']['oper']
            user_idoper = response.json()['0']['oper_id']
            user_fulloper = response.json()['0']['oper_brand']
            user_def = response.json()['0']['def']

            if user_id == "UZ":
                global all_info1
                global capitalin
                global info0
                all_info1 = f"‚úÖ ¬ª <u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É —É–∑–±–µ–∫—Å–∫–æ–º—É –Ω–æ–º–µ—Ä—É: (@thestrikem)</u>\n<code>     {get_phone}</code>\n\n     <b>üá∫üáø –°—Ç—Ä–∞–Ω–∞ –Ω–æ–º–µ—Ä–∞:</b>\n¬ª –°—Ç—Ä–∞–Ω–∞: {user_namec}\n¬ª –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {user_fullnamec}\n¬ª –Ø–∑—ã–∫: {user_lang}\n¬ª ID: {user_id}\n¬ª –ö–æ–¥: {user_code}\n¬ª ISO: {user_iso}\n¬ª –¢–µ–ª–µ–∫–æ–¥: {user_telecod}\n\n     <b>üá∫üáø –ì–æ—Ä–æ–¥ –Ω–æ–º–µ—Ä–∞:</b>\n"
                capitalin = f"¬ª –ì–æ—Ä–æ–¥: {user_city}\n¬ª –¢–µ–ª–µ–∫–æ–¥ –ì–æ—Ä–æ–¥–∞: {user_tt}\n¬ª Area: {user_area}\n¬ª –®–∏—Ä–æ—Ç–∞: {user_width}\n¬ª –î–æ–ª–≥–æ—Ç–∞: {user_lenth}\n¬ª –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {user_timez}\n¬ª –ü–æ—Å—Ç: {user_post}\n"
                info0 = f"\n     <b>üá∫üáø –û–ø–µ—Ä–∞—Ç–æ—Ä:</b>\n¬ª –ì–ª–∞–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {user_oper}\n¬ª –ü–µ—Ä–µ–¥–∞–≤–∞—é—â–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {user_fulloper}\n¬ª ID –û–ø–µ—Ä–∞—Ç–æ—Ä–∞: {user_idoper}\n¬ª Def: {user_def}\n\n@strikemtestbot"

                photo = open('uz.jpg', 'rb')

                bot.send_message(message.chat.id, f"{all_info1} {capitalin} {info0}", parse_mode='html')
                bot.send_photo(message.chat.id, photo)

            if user_id == "RU":
                all_info1 = f"‚úÖ ¬ª <u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä—É—Å—Å–∫–æ–º—É –Ω–æ–º–µ—Ä—É: (@thestrikem)</u>\n<code>     {get_phone}</code>\n\n     <b>üá∑üá∫ –°—Ç—Ä–∞–Ω–∞ –Ω–æ–º–µ—Ä–∞:</b>\n¬ª –°—Ç—Ä–∞–Ω–∞: {user_namec}\n¬ª –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {user_fullnamec}\n¬ª –Ø–∑—ã–∫: {user_lang}\n¬ª ID: {user_id}\n¬ª –ö–æ–¥: {user_code}\n¬ª ISO: {user_iso}\n¬ª –¢–µ–ª–µ–∫–æ–¥: {user_telecod}\n\n     <b>üá∑üá∫ –ì–æ—Ä–æ–¥ –Ω–æ–º–µ—Ä–∞:</b>\n"
                capitalin = f"¬ª –ì–æ—Ä–æ–¥: {user_city}\n¬ª –¢–µ–ª–µ–∫–æ–¥ –ì–æ—Ä–æ–¥–∞: {user_tt}\n¬ª Area: {user_area}\n¬ª –®–∏—Ä–æ—Ç–∞: {user_width}\n¬ª –î–æ–ª–≥–æ—Ç–∞: {user_lenth}\n¬ª –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {user_timez}\n¬ª –ü–æ—Å—Ç: {user_post}\n"
                info0 = f"\n     <b>üá∑üá∫ –û–ø–µ—Ä–∞—Ç–æ—Ä:</b>\n¬ª –ì–ª–∞–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {user_oper}\n¬ª –ü–µ—Ä–µ–¥–∞–≤–∞—é—â–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {user_fulloper}\n¬ª ID –û–ø–µ—Ä–∞—Ç–æ—Ä–∞: {user_idoper}\n¬ª Def: {user_def}\n\n@strikemtestbot"

                photo1 = open('ru.jpg', 'rb')

                bot.send_message(message.chat.id, f"{all_info1} {capitalin} {info0}", parse_mode='html')
                bot.send_photo(message.chat.id, photo1)

        def main():
            info()

        main()
    except Exception as e:
        print(e)

@bot.message_handler(commands=['g'])
def start(message):
    msg = bot.send_message(message.chat.id, '‚úÖ ¬ª –û–∫–µ–π, —á—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
    bot.register_next_step_handler(msg, next_event)

def next_event(message):
    text = message.text
    url = f'https://www.google.com/search?b-d&q=' + str(text).replace(' ', '+')
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0'}

    def parser(question, url, headers):
        r = requests.get(url, headers = headers)
        soup = BeautifulSoup(r.content, 'html.parser')
        items = soup.findAll('div', class_ = "rc")

        comps = []

        for item in items:
            comps.append({
                'link': item.find('a').get('href'),
                'title': item.find('h3', class_ = 'LC20lb DKV0Md').get_text(strip = True)
            })

        for comp in comps:
            bot.send_message(message.chat.id, str('‚úÖ ¬ª –ù–∞–π–¥–µ–Ω–æ: ') +comp['title'] + ' -- ' + comp['link'])

    parser(text, url, headers)

@bot.message_handler(commands=['scan_port'])
def start(message):
    args = message.text.split(" ")
    ips = args[1]
    ports = int(args[2])
    bot.send_message(message.chat.id, '‚úÖ ¬ª –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤...\n¬ª –ï—Å–ª–∏ –≤—Å–µ –ø–æ—Ä—Ç—ã –±—É–¥—É—Ç–µ –∑–∞–∫—Ä—ã—Ç—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—à–µ—Ç.')
    try:
        def scan_port(ip, port):
            client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            if client.connect_ex((ip, port)):
                print(f"–ø–æ—Ä—Ç : {port} –æ–∫–æ–∑–∞–ª—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º –¥–ª—è –∞–π–ø–∏ : {ip}")
            else:
                bot.send_message(message.chat.id, f"‚úÖ ¬ª –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç: <b>{port}</b> –æ—Ç –∞–π–ø–∏ –∞–¥—Ä–µ—Å–∞: <b>{ip}</b>", parse_mode='html')
                print(f"–æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç : {port} –æ—Ç –∞–π–ø–∏ –∞–¥—Ä–µ—Å–∞ : {ip} ")

        ip = socket.gethostbyname(f"{ips}")

        def scan_por():
            scan_port(ip, i)

        for i in range(ports):
            threading.Thread(target=scan_por).start()
    except Exception as e:
        print(e)

@bot.message_handler(content_types=['text'])
def start(message):
    text = message.text
    id = message.chat.id
    if text == '–ß–µ–∫ IP':
        bot.send_message(id, "üí∞ ¬ª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>/checkip (–∞–π–ø–∏)</b>\n¬ª –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å IP —Å–∞–π—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - /ip (—Å—Å—ã–ª–∫–∞)", parse_mode='html')

    if text == '–ß–µ–∫ –ù–æ–º–µ—Ä':
        bot.send_message(id, "üí∞ ¬ª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>/checkph (–Ω–æ–º–µ—Ä)</b>", parse_mode='html')

    if text == '–ù–µ–∫–æ–±–∏–Ω':
        bot.send_message(id, "üí∞ ¬ª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>/nekobin</b>\n¬ª –î–∞–ª–µ–µ –ø—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.", parse_mode='html')

    if text == '–°–∫–∞–Ω–Ω–µ—Ä –ü–æ—Ä—Ç–æ–≤':
        bot.send_message(id, "üí∞ ¬ª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>/scan_port (–∞–π–ø–∏) (–¥–æ –∫–∞–∫–æ–≥–æ –ø–æ—Ä—Ç–∞)</b>\n¬ª –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.", parse_mode='html')

    if text == '–°–ø–∞–º–µ—Ä –ø–æ—á—Ç—ã':
        msg = "¬ª –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –í–∞—à–∞ –ø–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç mail.ru (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ), smtp.mail.ru –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏ –Ω–µ –º–µ–Ω—è—Ç—å, –≤ —Ç–µ–º–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ '+', —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª-–≤–æ –ø–∏—Å–µ–º –∑–∞ —Ä–∞–∑: 15."
        bot.send_message(id, f"üí∞ ¬ª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>/send_mail –≤–∞—à–∞_–ø–æ—á—Ç–∞ –ø–∞—Ä–æ–ª—å_–ø–æ—á—Ç—ã smtp.mail.ru –ø–æ—á—Ç–∞_–ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ç–µ–º–∞_—Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–ª-–≤–æ_–ø–∏—Å–µ–º</b>\n{msg}", parse_mode='html')

    if text == '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π':
        bot.send_message(id, f"üí∞ ¬ª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>/gen_pass –∫–æ–ª-–≤–æ_—Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–∞—Ä–æ–ª–µ")


bot.polling(none_stop=True)